{"version":3,"file":"static/js/921.46837ac3.chunk.js","mappings":"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","sources":["webpack://codespeak/./src/css/TokenDisplay.module.css?41a3","components/TokenDisplay.tsx","../node_modules/@mui/material/useMediaQuery/useMediaQuery.js","../node_modules/@mui/material/utils/useEnhancedEffect.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"tokenDisplay\":\"TokenDisplay_tokenDisplay__vo1l1\",\"tokenImage\":\"TokenDisplay_tokenImage__gDVU4\",\"rotate\":\"TokenDisplay_rotate__CRJXx\"};","// TokenDisplay.tsx\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport { auth, db } from '../contexts/AuthContext'; \r\nimport { ref, onValue, off } from \"firebase/database\";\r\nimport styles from '../css/TokenDisplay.module.css';\r\nimport { useMediaQuery } from '@mui/material';\r\n\r\n\r\ninterface TokenDisplayProps {\r\n  onClick: () => void;\r\n}\r\n\r\nconst TokenDisplay: React.FC<TokenDisplayProps> = ({ onClick }) => {\r\n  const [tokens, setTokens] = useState<number | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  const currentUser = auth.currentUser; // Get the current user using Firebase's auth object\r\n\r\n  const userRef = ref(db, `users/${currentUser?.uid}/tokens`);\r\n\r\n  const isSmallScreen = useMediaQuery('(max-width:500px)'); // This will be true if the screen width is 500px or less\r\n\r\n  useEffect(() => {\r\n    const handleData = (snap: any) => {\r\n      if (snap.exists()) {\r\n        setTokens(snap.val());\r\n        setLoading(false);\r\n      } else {\r\n        setTimeout(() => setLoading(true), 1000);\r\n      }\r\n      setLoading(false);\r\n    }\r\n\r\n    const handleError = (error: any) => {\r\n      setError(error);\r\n      setLoading(false);\r\n    }\r\n\r\n    onValue(userRef, handleData, handleError);\r\n\r\n    return () => {\r\n      off(userRef, 'value', handleData);\r\n    };\r\n  }, [currentUser, userRef, loading]);\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className={styles.tokenDisplay}>\r\n        Loading...\r\n        <img src='token.webp' alt=\"Token\" className={styles.tokenImage} />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className={styles.tokenDisplay}>\r\n        Error\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={styles.tokenDisplay} onClick={onClick}>\r\n      <img src='token.webp' alt=\"Token\" className={styles.tokenImage} />\r\n      {isSmallScreen ? \"\" : \"Balance: \"}{tokens}\r\n    </div>\r\n  )};\r\n\r\nexport default TokenDisplay;\r\n","import * as React from 'react';\nimport { getThemeProps, useThemeWithoutDefault as useTheme } from '@mui/system';\nimport useEnhancedEffect from '../utils/useEnhancedEffect';\n\n/**\n * @deprecated Not used internally. Use `MediaQueryListEvent` from lib.dom.d.ts instead.\n */\n\n/**\n * @deprecated Not used internally. Use `MediaQueryList` from lib.dom.d.ts instead.\n */\n\n/**\n * @deprecated Not used internally. Use `(event: MediaQueryListEvent) => void` instead.\n */\n\nfunction useMediaQueryOld(query, defaultMatches, matchMedia, ssrMatchMedia, noSsr) {\n  const [match, setMatch] = React.useState(() => {\n    if (noSsr && matchMedia) {\n      return matchMedia(query).matches;\n    }\n    if (ssrMatchMedia) {\n      return ssrMatchMedia(query).matches;\n    }\n\n    // Once the component is mounted, we rely on the\n    // event listeners to return the correct matches value.\n    return defaultMatches;\n  });\n  useEnhancedEffect(() => {\n    let active = true;\n    if (!matchMedia) {\n      return undefined;\n    }\n    const queryList = matchMedia(query);\n    const updateMatch = () => {\n      // Workaround Safari wrong implementation of matchMedia\n      // TODO can we remove it?\n      // https://github.com/mui/material-ui/pull/17315#issuecomment-528286677\n      if (active) {\n        setMatch(queryList.matches);\n      }\n    };\n    updateMatch();\n    // TODO: Use `addEventListener` once support for Safari < 14 is dropped\n    queryList.addListener(updateMatch);\n    return () => {\n      active = false;\n      queryList.removeListener(updateMatch);\n    };\n  }, [query, matchMedia]);\n  return match;\n}\n\n// eslint-disable-next-line no-useless-concat -- Workaround for https://github.com/webpack/webpack/issues/14814\nconst maybeReactUseSyncExternalStore = React['useSyncExternalStore' + ''];\nfunction useMediaQueryNew(query, defaultMatches, matchMedia, ssrMatchMedia, noSsr) {\n  const getDefaultSnapshot = React.useCallback(() => defaultMatches, [defaultMatches]);\n  const getServerSnapshot = React.useMemo(() => {\n    if (noSsr && matchMedia) {\n      return () => matchMedia(query).matches;\n    }\n    if (ssrMatchMedia !== null) {\n      const {\n        matches\n      } = ssrMatchMedia(query);\n      return () => matches;\n    }\n    return getDefaultSnapshot;\n  }, [getDefaultSnapshot, query, ssrMatchMedia, noSsr, matchMedia]);\n  const [getSnapshot, subscribe] = React.useMemo(() => {\n    if (matchMedia === null) {\n      return [getDefaultSnapshot, () => () => {}];\n    }\n    const mediaQueryList = matchMedia(query);\n    return [() => mediaQueryList.matches, notify => {\n      // TODO: Use `addEventListener` once support for Safari < 14 is dropped\n      mediaQueryList.addListener(notify);\n      return () => {\n        mediaQueryList.removeListener(notify);\n      };\n    }];\n  }, [getDefaultSnapshot, matchMedia, query]);\n  const match = maybeReactUseSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n  return match;\n}\nexport default function useMediaQuery(queryInput, options = {}) {\n  const theme = useTheme();\n  // Wait for jsdom to support the match media feature.\n  // All the browsers MUI support have this built-in.\n  // This defensive check is here for simplicity.\n  // Most of the time, the match media logic isn't central to people tests.\n  const supportMatchMedia = typeof window !== 'undefined' && typeof window.matchMedia !== 'undefined';\n  const {\n    defaultMatches = false,\n    matchMedia = supportMatchMedia ? window.matchMedia : null,\n    ssrMatchMedia = null,\n    noSsr = false\n  } = getThemeProps({\n    name: 'MuiUseMediaQuery',\n    props: options,\n    theme\n  });\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof queryInput === 'function' && theme === null) {\n      console.error(['MUI: The `query` argument provided is invalid.', 'You are providing a function without a theme in the context.', 'One of the parent elements needs to use a ThemeProvider.'].join('\\n'));\n    }\n  }\n  let query = typeof queryInput === 'function' ? queryInput(theme) : queryInput;\n  query = query.replace(/^@media( ?)/m, '');\n\n  // TODO: Drop `useMediaQueryOld` and use  `use-sync-external-store` shim in `useMediaQueryNew` once the package is stable\n  const useMediaQueryImplementation = maybeReactUseSyncExternalStore !== undefined ? useMediaQueryNew : useMediaQueryOld;\n  const match = useMediaQueryImplementation(query, defaultMatches, matchMedia, ssrMatchMedia, noSsr);\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useDebugValue({\n      query,\n      match\n    });\n  }\n  return match;\n}","import { unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nexport default useEnhancedEffect;"],"names":["_ref","onClick","_useState","useState","_useState2","_slicedToArray","tokens","setTokens","_useState3","_useState4","loading","setLoading","_useState5","_useState6","error","setError","currentUser","auth","userRef","ref","db","concat","uid","isSmallScreen","useMediaQuery","useEffect","handleData","snap","exists","val","setTimeout","onValue","off","_jsxs","className","styles","children","_jsx","src","alt","useMediaQueryOld","query","defaultMatches","matchMedia","ssrMatchMedia","noSsr","_React$useState","React","matches","_React$useState2","match","setMatch","useEnhancedEffect","active","queryList","updateMatch","addListener","removeListener","maybeReactUseSyncExternalStore","useMediaQueryNew","getDefaultSnapshot","getServerSnapshot","_React$useMemo","mediaQueryList","notify","_React$useMemo2","getSnapshot","subscribe","queryInput","options","arguments","length","undefined","theme","useTheme","supportMatchMedia","window","_getThemeProps","getThemeProps","name","props","_getThemeProps$defaul","_getThemeProps$matchM","_getThemeProps$ssrMat","_getThemeProps$noSsr","replace"],"sourceRoot":""}